name: AI Chat Core CI/CD

on:
  push:
    branches: [main]
    paths:
      - 'sylo-monorepo/apps/ai-chat-core/**'
      - '.github/WORKFLOWS/ai-chat-core.yml'
  pull_request:
    branches: [main]
    paths:
      - 'sylo-monorepo/apps/ai-chat-core/**'
      - '.github/WORKFLOWS/ai-chat-core.yml'

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: 'sylo-monorepo/apps/ai-chat-core/requirements.txt'
      
      - name: Install dependencies
        run: |
          cd sylo-monorepo/apps/ai-chat-core
          python -m pip install --upgrade pip
          pip install flake8 pytest black isort
          pip install -r requirements.txt
      
      - name: Lint with flake8
        run: |
          cd sylo-monorepo/apps/ai-chat-core
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Check formatting with black
        run: |
          cd sylo-monorepo/apps/ai-chat-core
          black --check .
      
      - name: Check imports with isort
        run: |
          cd sylo-monorepo/apps/ai-chat-core
          isort --check-only --profile black .
      
      - name: Test with pytest
        run: |
          cd sylo-monorepo/apps/ai-chat-core
          pytest
  
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./sylo-monorepo/apps/ai-chat-core
          push: false
          tags: sylo/ai-chat-core:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/ai-chat-core.tar
      
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ai-chat-core-docker-image
          path: /tmp/ai-chat-core.tar
  
  deploy:
    name: Deploy to Cloud
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: ai-chat-core-docker-image
          path: /tmp
      
      - name: Load Docker image
        run: |
          docker load --input /tmp/ai-chat-core.tar
      
      # This is a placeholder for the actual deployment step
      # Replace with your actual deployment method (e.g., AWS ECS, GCP Cloud Run, etc.)
      - name: Deploy to Cloud
        run: |
          echo "Deploying to cloud environment..."
          # Example deployment commands (replace with actual deployment)
          # aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_REGISTRY
          # docker tag sylo/ai-chat-core:latest $ECR_REGISTRY/sylo/ai-chat-core:latest
          # docker push $ECR_REGISTRY/sylo/ai-chat-core:latest
          # aws ecs update-service --cluster your-cluster --service your-service --force-new-deployment
        env:
          # Add any required deployment credentials as GitHub secrets
          # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}